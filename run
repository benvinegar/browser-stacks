#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var wd = require('wd');
var inorder = require('in-order');
var debug = require('debug')('browser-stacks');

var browsers = require('./browsers');

var username = process.argv[2];
var key = process.argv[3];

var src = fs.readFileSync(__dirname + '/test.js', 'utf8');
var js_str = '(function() { ' + src + ' })();';

var stackdir = path.join(__dirname, 'stacks');
var onerrorArgsDir = path.join(__dirname, 'onerror-args');

function run(list) {
    inorder(list, function(browser, done) {
        delete browser.platform;
        debug('initalizing %j', browser);
        js_eval(browser.name, browser.version, js_str, function(err, res) {
            if (err) {
                console.error(err);
                return done();
            }

            var stack = res[0];
            var filename = browser.name + '_' + browser.version + '.json';
            var outPath = path.join(stackdir, filename);
            debug('saving %s', outPath);

            var str = JSON.stringify(stack, null, '  ');
            fs.writeFileSync(outPath, str, 'utf-8');

            var onerrorArgs = res[1];
            outPath = path.join(onerrorArgsDir, filename);
            debug('saving %s', outPath);

            str = JSON.stringify(onerrorArgs, null, '  ');
            fs.writeFileSync(outPath, str, 'utf-8');

            done();
        });
    }, function(err) {
        console.error(err);
    });
};

function js_eval(name, version, src, cb) {
    var browser = wd.remote('ondemand.saucelabs.com', 80, username, key);

    // allow for shorter/common name
    var map = {
        'ie': 'iexplore'
    };

    name = map[name] || name;

    var conf = {
        browserName: name,
        version: version,
        platform: 'any'
    };

    browser.init(conf, function(err) {
        if (err) {
            return cb(err);
        }

        browser.eval(src, function(err, res) {
            if (err) {
                return cb(err);
            }

            var stackResult = res;

            // For whatever reason, I couldn't get an about:blank/default
            // Selenium page to work w/ window.onerror. I had to load an actual page.
            // But someone could try again / have better luck than me.
            browser.get('http://benvinegar.github.io/browser-stacks/onerror.html', function (err, res) {
                if (err) {
                    return cb(err);
                }

                browser.eval('onerrorArgs', function (err, onerrorResult) {
                    if (err) {
                        return cb(err);
                    }

                    browser.quit();
                    return cb(null, [stackResult, onerrorResult]);
                });
            });
        });
    });
}

run(browsers);
